@Misc{Ruka2020,
  author       = {Adam Ruka},
  howpublished = {Website},
  month        = jul,
  title        = {Graal Truffle tutorial part 0 – what is Truffle?},
  year         = {2020},
  url          = {https://www.endoflineblog.com/graal-truffle-tutorial-part-1-setup-nodes-calltarget},
}

@Article{Williams2016,
  author        = {Williams, Brandon M. and Perugini, Saverio},
  journal       = {B.M. Williams \& Perugini, S. (2016) Revisiting the Futamura Projections: A diagrammatic approach. Theoretical and Applied Informatics, 28(4), 15-32},
  title         = {Revisiting the Futamura Projections: A Diagrammatic Approach},
  year          = {2016},
  month         = {dec},
  number        = {4},
  pages         = {15--32},
  volume        = {28},
  abstract      = {The advent of language implementation tools such as PyPy and Truffle/Graal have reinvigorated and broadened interest in topics related to automatic compiler generation and optimization. Given this broader interest, we revisit the Futamura Projections using a novel diagram scheme. Through these diagrams we emphasize the recurring patterns in the Futamura Projections while addressing their complexity and abstract nature. We anticipate that this approach will improve the accessibility of the Futamura Projections and help foster analysis of those new tools through the lens of partial evaluation.},
  archiveprefix = {arXiv},
  copyright     = {arXiv.org perpetual, non-exclusive license},
  date          = {2016-11-29},
  doi           = {10.20904/284015},
  eprint        = {1611.09906},
  file          = {:Williams2016 - Revisiting the Futamura Projections_ a Diagrammatic Approach.pdf:PDF},
  keywords      = {Programming Languages (cs.PL), Software Engineering (cs.SE), FOS: Computer and information sciences, F.3.2},
  primaryclass  = {cs.PL},
  publisher     = {Institute of Theoretical and Applied Informatics, Polish Academy of Sciences},
}

@Article{Futamura1999,
  author    = {Yoshihiko Futamura},
  journal   = {High. Order Symb. Comput.},
  title     = {Partial Evaluation of Computation Process - An Approach to a Compiler-Compiler},
  year      = {1999},
  number    = {4},
  pages     = {381--391},
  volume    = {12},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/lisp/Futamura99a.bib},
  doi       = {10.1023/A:1010095604496},
}

@Manual{OracleGraalVMnd,
  title        = {Get Started with GraalVM},
  organization = {Oracle},
  year         = {n.d.},
  howpublished = {Website},
  url          = {https://www.graalvm.org/22.3/docs/getting-started/},
}

@Manual{OracleTrufflend,
  title        = {Truffle Language Implementation Framework},
  organization = {Oracle},
  year         = {n.d.},
  howpublished = {Website},
  url          = {https://www.graalvm.org/22.3/graalvm-as-a-platform/language-implementation-framework/},
}

@Misc{Ruka2020a,
  author       = {Adam Ruka},
  howpublished = {Website},
  month        = sep,
  title        = {Graal Truffle tutorial part 1 – setup, Nodes, CallTarget},
  year         = {2020},
  url          = {https://www.endoflineblog.com/graal-truffle-tutorial-part-0-what-is-truffle},
}

@Manual{PyPyIntro,
  title        = {What is PyPy? - PyPy documentation},
  note         = {Accessed on 2023-02-02},
  organization = {The PyPy Project},
  howpublished = {Website},
  url          = {https://doc.pypy.org/en/latest/introduction.html},
}

@Manual{PyPyGoalsAndArch,
  title        = {Goals and Architecture Overview - PyPy documentation},
  note         = {Accessed on 2023-02-02},
  organization = {The PyPy Project},
  year         = {n.d.},
  url          = {https://doc.pypy.org/en/latest/architecture.html},
}

@Manual{RPythonGettingStarted,
  title        = {Getting Started with RPython - RPython Documentation},
  note         = {Accessed on 2023-02-02},
  organization = {The PyPy Project},
  year         = {n.d.},
  url          = {https://rpython.readthedocs.io/en/latest/getting-started.html},
}

@Manual{RPythonGoalsAndArch,
  title        = {Goals and Architecture Overview - RPython Documentation},
  note         = {Accessed on 2023-02-02},
  organization = {The PyPy Project},
  year         = {n.d.},
  url          = {https://rpython.readthedocs.io/en/latest/architecture.html},
}

@Manual{RPythonRPyToolchain,
  title        = {The RPython Toolchain - RPython Documentation},
  note         = {Accessed on 2023-02-02},
  organization = {The PyPy Project},
  year         = {n.d.},
  url          = {https://rpython.readthedocs.io/en/latest/translation.html},
}

@Article{Wuerthinger2017,
  author  = {Thomas Würthinger and Christian Wimmer and Christian Humer and Andreas Wöß and Lukas Stadler and Chris Seaton and Gilles Duboscq and Doug Simon and Matthias Grimmer},
  journal = {Proceedings of the 38th ACM SIGPLAN Conference on programming language design and implementation},
  title   = {Practical partial evaluation for high-performance dynamic language runtimes},
  year    = {2017},
  month   = jun,
  pages   = {662-676},
  volume  = {128414},
  doi     = {10.1145/3062341.3062381},
}

@Misc{Vacchi2021,
  author       = {Edoardo Vacchi},
  howpublished = {Website},
  month        = sep,
  note         = {Accessed on: 2023-02-02},
  title        = {Dr. Futamura's Projection Machine: From Interpreters to Compilers through a Marvelous Device},
  year         = {2021},
  url          = {https://speakerdeck.com/evacchi/dr-futamuras-projection-machine-from-interpreters-to-compilers-through-a-marvelous-device},
}

@Manual{PyPyOpt,
  title        = {The --opt or -O translation option - PyPy documentation},
  note         = {Accessed on: 2023-02-03},
  organization = {The PyPy Project},
  year         = {n.d.},
  url          = {https://doc.pypy.org/en/latest/config/opt.html},
}

@Misc{Brown2011,
  author       = {Andrew Brown},
  howpublished = {Website},
  month        = apr,
  note         = {Accessed on: 2023-02-03},
  title        = {Tutorial Part 2: Adding a JIT},
  year         = {2011},
  url          = {https://morepypy.blogspot.com/2011/04/tutorial-part-2-adding-jit.html},
}

@Book{Jones1993,
  author    = {Neil D. Jones and Carsten K. Gomard and Peter Sestoft},
  publisher = {Prentice Hall International},
  title     = {Partial evaluation and automatic program generation},
  year      = {1993},
  isbn      = {0130202495},
  url       = {https://www.itu.dk/~sestoft/pebook/jonesgomardsestoft-a4.pdf},
}

@Article{Gopinath2019,
  author        = {Gopinath, Rahul and Zeller, Andreas},
  title         = {Building Fast Fuzzers},
  year          = {2019},
  month         = nov,
  abstract      = {Fuzzing is one of the key techniques for evaluating the robustness of programs against attacks. Fuzzing has to be effective in producing inputs that cover functionality and find vulnerabilities. But it also has to be efficient in producing such inputs quickly. Random fuzzers are very efficient, as they can quickly generate random inputs; but they are not very effective, as the large majority of inputs generated is syntactically invalid. Grammar-based fuzzers make use of a grammar (or another model for the input language) to produce syntactically correct inputs, and thus can quickly cover input space and associated functionality. Existing grammar-based fuzzers are surprisingly inefficient, though: Even the fastest grammar fuzzer Dharma still produces inputs about a thousand times slower than the fastest random fuzzer. So far, one can have an effective or an efficient fuzzer, but not both. In this paper, we describe how to build fast grammar fuzzers from the ground up, treating the problem of fuzzing from a programming language implementation perspective. Starting with a Python textbook approach, we adopt and adapt optimization techniques from functional programming and virtual machine implementation techniques together with other novel domain-specific optimizations in a step-by-step fashion. In our F1 prototype fuzzer, these improve production speed by a factor of 100--300 over the fastest grammar fuzzer Dharma. As F1 is even 5--8 times faster than a lexical random fuzzer, we can find bugs faster and test with much larger valid inputs than previously possible.},
  archiveprefix = {arXiv},
  copyright     = {arXiv.org perpetual, non-exclusive license},
  doi           = {10.48550/ARXIV.1911.07707},
  eprint        = {1911.07707},
  file          = {:Gopinath2019 - Building Fast Fuzzers.pdf:PDF},
  keywords      = {Software Engineering (cs.SE), Cryptography and Security (cs.CR), Programming Languages (cs.PL), FOS: Computer and information sciences, D.4.6; D.2.5},
  primaryclass  = {cs.SE},
  publisher     = {arXiv},
}

@InBook{Mogensen1999,
  author       = {Torben Æ Mogensen},
  pages        = {1-19},
  publisher    = {Springer Berlin / Heidelberg},
  title        = {Partial Evaluation: Concepts and Applications},
  year         = {1999},
  address      = {Berlin, Heidelberg},
  isbn         = {3540667105},
  series       = {Lecture Notes in Artificial Intelligence},
  volume       = {1706},
  abstract     = {As the complexity of software increases, researchers and practicioners continue to seek better techniques for engineering the construction of evolution of software. Partial evaluation is an attractive technology for modern software construction since it provides automatic tools for software specialization and is based on rigorous semantic foundations. This book is based on a school held at DIKU Copenhagen, Denmark in summer 1998 during which leading researchers summarized the state of the art in partial evaluation. The lectures presented survey the foundations of partial evaluation in a clear and rigorous manner and practically introduce several existing partial evaluators with numerous examples. The second part of the book is devoted to more sophisticated theoretical aspects, advances systems and applications, and highlights open problems and challenges. The book is ideally suited for advanced courses and for self study.},
  booktitle    = {Partial Evaluation},
  copyright    = {Springer-Verlag Berlin Heidelberg 1999},
  doi          = {10.1007/3-540-47018-2_1},
  issn         = {0302-9743},
  keywords     = {Computer Science ; Computer software ; Computer systems ; Evaluation ; Programming Languages, Compilers, Interpreters ; Programming Techniques ; Software engineering ; Software Engineering/Programming and Operating Systems},
  language     = {eng},
  organization = {SpringerLink (Online service)},
}

@Comment{jabref-meta: databaseType:bibtex;}